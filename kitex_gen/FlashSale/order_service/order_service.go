// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package order_service

import (
	"context"
	"fmt"
)

type CreateOrderRequest struct {
	UserId     int32 `thrift:"user_id,1" frugal:"1,default,i32" json:"user_id"`
	ActivityId int32 `thrift:"activity_id,2" frugal:"2,default,i32" json:"activity_id"`
	ProductId  int32 `thrift:"product_id,3" frugal:"3,default,i32" json:"product_id"`
}

func NewCreateOrderRequest() *CreateOrderRequest {
	return &CreateOrderRequest{}
}

func (p *CreateOrderRequest) InitDefault() {
}

func (p *CreateOrderRequest) GetUserId() (v int32) {
	return p.UserId
}

func (p *CreateOrderRequest) GetActivityId() (v int32) {
	return p.ActivityId
}

func (p *CreateOrderRequest) GetProductId() (v int32) {
	return p.ProductId
}
func (p *CreateOrderRequest) SetUserId(val int32) {
	p.UserId = val
}
func (p *CreateOrderRequest) SetActivityId(val int32) {
	p.ActivityId = val
}
func (p *CreateOrderRequest) SetProductId(val int32) {
	p.ProductId = val
}

func (p *CreateOrderRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderRequest(%+v)", *p)
}

var fieldIDToName_CreateOrderRequest = map[int16]string{
	1: "user_id",
	2: "activity_id",
	3: "product_id",
}

type CreateOrderResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
}

func NewCreateOrderResponse() *CreateOrderResponse {
	return &CreateOrderResponse{}
}

func (p *CreateOrderResponse) InitDefault() {
}

func (p *CreateOrderResponse) GetCode() (v int32) {
	return p.Code
}

func (p *CreateOrderResponse) GetMessage() (v string) {
	return p.Message
}
func (p *CreateOrderResponse) SetCode(val int32) {
	p.Code = val
}
func (p *CreateOrderResponse) SetMessage(val string) {
	p.Message = val
}

func (p *CreateOrderResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateOrderResponse(%+v)", *p)
}

var fieldIDToName_CreateOrderResponse = map[int16]string{
	1: "code",
	2: "message",
}

type OrderService interface {
	CreateOrder(ctx context.Context, req *CreateOrderRequest) (r *CreateOrderResponse, err error)
}

type OrderServiceCreateOrderArgs struct {
	Req *CreateOrderRequest `thrift:"req,1" frugal:"1,default,CreateOrderRequest" json:"req"`
}

func NewOrderServiceCreateOrderArgs() *OrderServiceCreateOrderArgs {
	return &OrderServiceCreateOrderArgs{}
}

func (p *OrderServiceCreateOrderArgs) InitDefault() {
}

var OrderServiceCreateOrderArgs_Req_DEFAULT *CreateOrderRequest

func (p *OrderServiceCreateOrderArgs) GetReq() (v *CreateOrderRequest) {
	if !p.IsSetReq() {
		return OrderServiceCreateOrderArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OrderServiceCreateOrderArgs) SetReq(val *CreateOrderRequest) {
	p.Req = val
}

func (p *OrderServiceCreateOrderArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OrderServiceCreateOrderArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderArgs(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderArgs = map[int16]string{
	1: "req",
}

type OrderServiceCreateOrderResult struct {
	Success *CreateOrderResponse `thrift:"success,0,optional" frugal:"0,optional,CreateOrderResponse" json:"success,omitempty"`
}

func NewOrderServiceCreateOrderResult() *OrderServiceCreateOrderResult {
	return &OrderServiceCreateOrderResult{}
}

func (p *OrderServiceCreateOrderResult) InitDefault() {
}

var OrderServiceCreateOrderResult_Success_DEFAULT *CreateOrderResponse

func (p *OrderServiceCreateOrderResult) GetSuccess() (v *CreateOrderResponse) {
	if !p.IsSetSuccess() {
		return OrderServiceCreateOrderResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OrderServiceCreateOrderResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateOrderResponse)
}

func (p *OrderServiceCreateOrderResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OrderServiceCreateOrderResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderServiceCreateOrderResult(%+v)", *p)
}

var fieldIDToName_OrderServiceCreateOrderResult = map[int16]string{
	0: "success",
}
