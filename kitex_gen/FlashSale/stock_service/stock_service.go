// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package stock_service

import (
	"context"
	"fmt"
)

type DeductStockRequest struct {
	ProductId int32 `thrift:"product_id,1" frugal:"1,default,i32" json:"product_id"`
	Quantity  int64 `thrift:"quantity,2" frugal:"2,default,i64" json:"quantity"`
}

func NewDeductStockRequest() *DeductStockRequest {
	return &DeductStockRequest{}
}

func (p *DeductStockRequest) InitDefault() {
}

func (p *DeductStockRequest) GetProductId() (v int32) {
	return p.ProductId
}

func (p *DeductStockRequest) GetQuantity() (v int64) {
	return p.Quantity
}
func (p *DeductStockRequest) SetProductId(val int32) {
	p.ProductId = val
}
func (p *DeductStockRequest) SetQuantity(val int64) {
	p.Quantity = val
}

func (p *DeductStockRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeductStockRequest(%+v)", *p)
}

var fieldIDToName_DeductStockRequest = map[int16]string{
	1: "product_id",
	2: "quantity",
}

type DeductStockResponse struct {
	Code    int32  `thrift:"code,1" frugal:"1,default,i32" json:"code"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
	Success bool   `thrift:"success,3" frugal:"3,default,bool" json:"success"`
}

func NewDeductStockResponse() *DeductStockResponse {
	return &DeductStockResponse{}
}

func (p *DeductStockResponse) InitDefault() {
}

func (p *DeductStockResponse) GetCode() (v int32) {
	return p.Code
}

func (p *DeductStockResponse) GetMessage() (v string) {
	return p.Message
}

func (p *DeductStockResponse) GetSuccess() (v bool) {
	return p.Success
}
func (p *DeductStockResponse) SetCode(val int32) {
	p.Code = val
}
func (p *DeductStockResponse) SetMessage(val string) {
	p.Message = val
}
func (p *DeductStockResponse) SetSuccess(val bool) {
	p.Success = val
}

func (p *DeductStockResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeductStockResponse(%+v)", *p)
}

var fieldIDToName_DeductStockResponse = map[int16]string{
	1: "code",
	2: "message",
	3: "success",
}

type StockService interface {
	DeductStock(ctx context.Context, req *DeductStockRequest) (r *DeductStockResponse, err error)
}

type StockServiceDeductStockArgs struct {
	Req *DeductStockRequest `thrift:"req,1" frugal:"1,default,DeductStockRequest" json:"req"`
}

func NewStockServiceDeductStockArgs() *StockServiceDeductStockArgs {
	return &StockServiceDeductStockArgs{}
}

func (p *StockServiceDeductStockArgs) InitDefault() {
}

var StockServiceDeductStockArgs_Req_DEFAULT *DeductStockRequest

func (p *StockServiceDeductStockArgs) GetReq() (v *DeductStockRequest) {
	if !p.IsSetReq() {
		return StockServiceDeductStockArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *StockServiceDeductStockArgs) SetReq(val *DeductStockRequest) {
	p.Req = val
}

func (p *StockServiceDeductStockArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *StockServiceDeductStockArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StockServiceDeductStockArgs(%+v)", *p)
}

var fieldIDToName_StockServiceDeductStockArgs = map[int16]string{
	1: "req",
}

type StockServiceDeductStockResult struct {
	Success *DeductStockResponse `thrift:"success,0,optional" frugal:"0,optional,DeductStockResponse" json:"success,omitempty"`
}

func NewStockServiceDeductStockResult() *StockServiceDeductStockResult {
	return &StockServiceDeductStockResult{}
}

func (p *StockServiceDeductStockResult) InitDefault() {
}

var StockServiceDeductStockResult_Success_DEFAULT *DeductStockResponse

func (p *StockServiceDeductStockResult) GetSuccess() (v *DeductStockResponse) {
	if !p.IsSetSuccess() {
		return StockServiceDeductStockResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StockServiceDeductStockResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeductStockResponse)
}

func (p *StockServiceDeductStockResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StockServiceDeductStockResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StockServiceDeductStockResult(%+v)", *p)
}

var fieldIDToName_StockServiceDeductStockResult = map[int16]string{
	0: "success",
}
